#####################################################
#                                                   #
#                       PROG 10                     #
#               Written by Jason Scott              #
#               jason.scott@mcpa-stl.org            #
#                                                   #
#                 Cyber Patriot 2016                #
#                                                   #
#              Composed in Python 2.7.12            #
#                   PEP 8 Compliant                 #
#                                                   #
#####################################################

my_data = [47, 230, 92, 83, 0, 233, 244, 179, 11, 104, 116, 137, 3, 46, 107, 10, 58, 18, 201, 132, 10, 139, 254, 211,
           249, 135, 149, 243, 170, 197, 20, 140, 124, 45, 5, 180, 225, 151, 237, 60, 33, 184, 137, 119, 169, 222,
           237, 210, 3, 30, 85, 198, 210, 40, 86, 253, 125, 102, 203, 26, 118, 178, 204, 97, 61, 125, 103, 178, 51,
           17, 56, 122, 230, 140, 54, 46, 81, 112, 194, 256, 39, 60, 236, 96, 241, 156, 126, 125, 170, 135, 155, 170,
           256, 147, 125, 94, 239, 221, 159, 26, 171, 233, 118, 122, 183, 28, 236, 83, 76, 94, 94, 105, 52, 82, 50,
           210, 202, 15, 190, 176, 105, 155, 95, 72, 46, 105, 108, 28, 42, 250, 111, 154, 152, 254, 219, 10, 22, 102,
           12, 15, 22, 15, 160, 221, 48, 218, 78, 249, 71, 80, 66, 197, 0, 200, 25, 231, 164, 183, 136, 116, 23, 249,
           236, 212, 50, 75, 243, 112, 128, 104, 185, 14, 107, 212, 115, 224, 219, 90, 107, 190, 255, 1, 6, 238, 165,
           77, 26, 203, 236, 227, 213, 149, 190, 222, 186, 19, 70, 120, 85, 36, 65, 97, 194, 137, 166, 118, 181, 42,
           70, 0, 53, 230, 37, 122, 61, 189, 103, 231, 54, 218, 84, 110, 32, 142, 133, 256, 133, 131, 199, 90, 94,
           144, 206, 55, 36, 216, 68, 3, 49, 169, 162, 173, 188, 210, 32, 132, 5, 222, 31, 27, 99, 101, 18, 77, 135,
           101, 252, 152, 48, 12, 137, 193, 11, 220, 210, 171, 63, 2, 133, 15, 210, 86, 107, 229, 22, 109, 107, 192,
           226, 74, 246, 16, 156, 43, 145, 131, 41, 12, 47, 59, 73, 206, 55, 152, 164, 45, 242, 29, 196, 136, 37,
           160, 153, 168, 155, 11, 51, 18, 181, 161, 45, 208, 53, 31, 82, 91, 23, 65, 88, 155, 236, 69, 42, 154, 223,
           213, 233, 157, 39, 199, 64, 113, 168, 85, 109, 70, 247, 18, 16, 139, 44, 5, 14, 19, 112, 73, 246, 159,
           189, 186, 221, 202, 202, 224, 202, 88, 114, 206, 129, 226, 91, 158, 12, 159, 162, 207, 201, 161, 162, 97,
           181, 147, 256, 51, 158, 11, 215, 210, 109, 150, 99, 250, 143, 116, 149, 165, 108, 33, 174, 143, 139, 24,
           125, 86, 25, 186, 134, 241, 140, 166, 228, 65, 206, 4, 132, 10, 136, 108, 76, 104, 37, 118, 67, 198, 230,
           214, 93, 180, 153, 64, 150, 233, 88, 5, 144, 256, 98, 159, 252, 230, 85, 71, 14, 171, 221, 169, 249, 121,
           49, 117, 146, 78, 105, 221, 202, 228, 151, 33, 70, 13, 4, 237, 13, 68, 47, 85, 26, 229, 254, 115, 118,
           180, 155, 239, 43, 176, 132, 24, 0, 139, 160, 233, 21, 120, 24, 173, 127, 131, 31, 253, 137, 63, 71, 255,
           92, 236, 178, 101, 35, 51, 25, 242, 220, 187, 27, 49, 93, 209, 9, 19, 84, 236, 238, 36, 5, 225, 92, 238,
           26, 118, 57, 141]

d = my_data


def do_math():
    return (d[12] + d[15] * d[124] / (d[242] + d[78]) * d[1] + d[345] * (d[500] / d[412]))

print(do_math())
